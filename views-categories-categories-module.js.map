{"version":3,"sources":["webpack:///./src/app/views/categories/categories-routing.module.ts","webpack:///./src/app/views/categories/categories.create.component.html","webpack:///./src/app/views/categories/categories.create.component.ts","webpack:///./src/app/views/categories/categories.list.component.html","webpack:///./src/app/views/categories/categories.list.component.ts","webpack:///./src/app/views/categories/categories.module.ts","webpack:///./src/app/views/categories/categories.update.component.html","webpack:///./src/app/views/categories/categories.update.component.ts"],"names":[],"mappings":"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","file":"views-categories-categories-module.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { CategoriesCreateComponent } from './categories.create.component';\r\nimport { CategoriesListComponent } from './categories.list.component';\r\nimport { CategoriesUpdateComponent } from './categories.update.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    data: {\r\n      title: 'Categories'\r\n    },\r\n    children: [\r\n      {\r\n        path: '',\r\n        redirectTo: 'create'\r\n      },\r\n      {\r\n        path: 'create',\r\n        component: CategoriesCreateComponent,\r\n        data: {\r\n          title: 'Create'\r\n        }\r\n      },\r\n      {\r\n        path: 'list',\r\n        component: CategoriesListComponent,\r\n        data: {\r\n          title: 'List'\r\n        }\r\n      },\r\n      {\r\n        path: 'edit/:id',\r\n        component: CategoriesUpdateComponent,\r\n        data: {\r\n          title: 'Edit'\r\n        }\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class CategoriesRoutingModule {}","module.exports = \"<div class=\\\"animated fadeIn\\\">\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-sm-6\\\">\\r\\n      <div class=\\\"card\\\">\\r\\n        <div class=\\\"card-header\\\">\\r\\n          <strong>Categories Create</strong>\\r\\n          <small>Form</small>\\r\\n        </div>\\r\\n        <div class=\\\"card-body\\\">\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-sm-12\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"name\\\">Categories Name</label>\\r\\n                <input type=\\\"text\\\" [(ngModel)]=\\\"category.name\\\"  #categories class=\\\"form-control\\\" id=\\\"name\\\" placeholder=\\\"Enter your category name\\\">\\r\\n              </div>\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"color\\\">Color</label>\\r\\n                <input type=\\\"color\\\" [(ngModel)]=\\\"category.color\\\" class=\\\"form-control\\\" id=\\\"color\\\"\\r\\n                  placeholder=\\\"Enter your tags name\\\">\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"card-footer\\\">\\r\\n          <button type=\\\"submit\\\" [disabled]=\\\"!enable\\\" (click)=\\\"createCategories()\\\" class=\\\"btn btn-sm btn-primary\\\"><i class=\\\"fa fa-dot-circle-o\\\"></i> Submit</button>\\r\\n          <button [routerLink]=\\\"['/admin/categories/list']\\\" class=\\\"btn btn-sm btn-secondary\\\"><i class=\\\"fa fa-list-alt\\\"></i> View categories list</button>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\"","import { Component, ElementRef, ViewChild } from '@angular/core';\r\nimport { AdminService } from '../../service/admin.service';\r\nimport { Login, Message, Tags, Category } from '../../model/index';\r\nimport { NotificationService } from '../../service/notification.service';\r\nimport { AuthenticationService } from '../../service/auth.service';\r\nimport { Router } from \"@angular/router\";\r\nimport { from } from 'rxjs';\r\n\r\n@Component({\r\n  templateUrl: 'categories.create.component.html'\r\n})\r\nexport class CategoriesCreateComponent {\r\n  @ViewChild('categories') categoriesElement: ElementRef;\r\n\r\n  category: Category;\r\n  enable: boolean = true;\r\n\r\n  constructor(private adminService: AdminService, private notificationService: NotificationService, private authService: AuthenticationService) { }\r\n\r\n  ngOnInit() {\r\n    this.category = new Category();\r\n    this.category.color = '#51b54a';\r\n  }\r\n\r\n  public createCategories() {\r\n    let name = this.categoriesElement.nativeElement.value;\r\n\r\n    if (name) {\r\n      this.enable = false;\r\n\r\n      this.adminService.createOrUpdateCategories(this.category).subscribe(res => {\r\n        this.enable = true;\r\n        this.notificationService.showSuccess('Category was created.', 'Notification');\r\n        this.categoriesElement.nativeElement.focus();\r\n        this.category.name = '';\r\n      },\r\n        err => {\r\n          let status = String(err);\r\n\r\n          if (status === \"Error: 401\") {\r\n            this.notificationService.showWaring('Session time out', 'Notification');\r\n\r\n            //set interval:\r\n            setTimeout(() => {\r\n              this.authService.sessionTimeOut();\r\n            }, 2500);\r\n          }\r\n          else {\r\n            this.notificationService.showWaring('Error with create tags: ' + status, 'Notification');\r\n          }\r\n\r\n          this.enable = true;\r\n        }\r\n      )\r\n    } else {\r\n      this.notificationService.showWaring('Category field must nor empty.', 'Notification');\r\n    }\r\n  }\r\n}\r\n\r\n\r\n","module.exports = \"<div class=\\\"animated fadeIn\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <!--/.col-->\\r\\n        <div class=\\\"col-lg-12 col-sm-8\\\">\\r\\n            <div class=\\\"card\\\">\\r\\n                <div class=\\\"card-header\\\">\\r\\n                    <i class=\\\"fa fa-align-justify\\\"></i> <b>CATEGORIES LIST</b>\\r\\n                </div>\\r\\n                <div class=\\\"card-body\\\">\\r\\n                    <ngx-loading [show]=\\\"loading\\\" [config]=\\\"{ backdropBorderRadius: '3px' }\\\"></ngx-loading>\\r\\n                    \\r\\n                    <table datatable [dtOptions]=\\\"dtOptions\\\" [dtTrigger]=\\\"dtTrigger\\\" class=\\\"row-border hover\\\">\\r\\n                        <thead>\\r\\n                            <tr>\\r\\n                                <th>STT</th>\\r\\n                                <th>Name</th>\\r\\n                                <th>Color</th>\\r\\n                                <th>Create at</th>\\r\\n                                <th>Updated at</th>\\r\\n                                <th>Actions</th>\\r\\n                            </tr>\\r\\n                        </thead>\\r\\n                        <tbody *ngIf=\\\"categories?.length != 0\\\">\\r\\n                            <tr *ngFor=\\\"let category of categories; let i = index\\\">\\r\\n                                <td>{{ i + 1 }}</td>\\r\\n                                <td>{{ category.name }}</td>\\r\\n                                <td>\\r\\n                                    <input type=\\\"color\\\" style=\\\"width: 70px;\\\" [readonly]=\\\"true\\\" [disabled]=\\\"true\\\" value=\\\"{{category.color}}\\\"/>\\r\\n                                </td>\\r\\n                                <td>{{ category.created | date: 'dd/MM/yyyy HH:mm:ss' }}</td>\\r\\n                                <td>{{ category.updated | date: 'dd/MM/yyyy HH:mm:ss' }}</td>\\r\\n                                <td>\\r\\n                                    <button (click)=\\\"gotoEdit(category.id)\\\" class=\\\"btn btn-sm btn-primary btn-square\\\"><i class=\\\"fa fa-pencil-square-o\\\" aria-hidden=\\\"true\\\"></i> Edit</button>\\r\\n                                    <button (click)=\\\"deleteCategory(category.id)\\\" class=\\\"btn btn-sm btn-secondary btn-square\\\"><i class=\\\"fa fa-trash-o\\\" aria-hidden=\\\"true\\\"></i> Delete</button>\\r\\n                                </td>\\r\\n                            </tr>\\r\\n                        </tbody>\\r\\n                        <tbody *ngIf=\\\"categories?.length == 0\\\">\\r\\n                            <tr>\\r\\n                                <td colspan=\\\"3\\\" class=\\\"no-data-available\\\">No data!</td>\\r\\n                            </tr>\\r\\n                        <tbody>\\r\\n                    </table>\\r\\n                </div>\\r\\n            </div>\\r\\n            <button type=\\\"button\\\" [routerLink]=\\\"['/admin/categories/create']\\\" class=\\\"btn pull-right btn-success btn-square active\\\" aria-pressed=\\\"true\\\"><i class=\\\"fa fa-paper-plane-o\\\" aria-hidden=\\\"true\\\"></i> Create category</button>\\r\\n            <br><br><br>\\r\\n        </div>\\r\\n        <!--/.col-->\\r\\n    </div>\\r\\n   \\r\\n</div>\"","import { AfterViewInit, Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { AdminService } from '../../service/admin.service';\r\nimport { Login, Message, Tags, Category } from '../../model/index';\r\nimport { NotificationService } from '../../service/notification.service';\r\nimport { AuthenticationService } from '../../service/auth.service';\r\nimport { Router } from \"@angular/router\";\r\nimport { from } from 'rxjs';\r\nimport { Subject } from 'rxjs';\r\nimport { HttpClient, HttpResponse, HttpHeaders } from '@angular/common/http';\r\nimport { environment } from \"../../../environments/environment\";\r\nimport { DataTableDirective } from 'angular-datatables';\r\n\r\nclass Person {\r\n  id: number;\r\n  firstName: string;\r\n  lastName: string;\r\n  actions: String;\r\n}\r\n\r\n@Component({\r\n  templateUrl: 'categories.list.component.html'\r\n})\r\nexport class CategoriesListComponent {\r\n  @ViewChild(DataTableDirective)\r\n  dtElement: DataTableDirective;\r\n  \r\n  tags: Tags[] = [];\r\n  categories: Category[] = [];\r\n  loading = false;\r\n  dtOptions: DataTables.Settings = {};\r\n  persons: Person[];\r\n  API_URL: String = environment.API_URL;\r\n  // We use this trigger because fetching the list of persons can be quite long,\r\n  // thus we ensure the data is fetched before rendering\r\n  dtTrigger: Subject<any> = new Subject();\r\n\r\n  constructor(private adminService: AdminService, private router: Router, private notificationService: NotificationService, private authService: AuthenticationService, private http: HttpClient) { }\r\n\r\n  ngOnInit(): void {\r\n\r\n    this.dtOptions = {\r\n      pagingType: 'full_numbers',\r\n      pageLength: 6\r\n    };\r\n    this.loading = true;\r\n\r\n    this.adminService.getAllCategories().subscribe(res => {\r\n      this.categories = res.data;\r\n      // Calling the DT trigger to manually render the table\r\n      this.dtTrigger.next();\r\n      this.loading = false;\r\n    },\r\n      err => {\r\n        let status = String(err);\r\n\r\n        if (status === \"Error: 401\") {\r\n          this.notificationService.showWaring('Session time out', 'Notification');\r\n\r\n          //set interval:\r\n          setTimeout(() => {\r\n            this.authService.sessionTimeOut();\r\n          }, 2500);\r\n        }\r\n        else {\r\n          this.notificationService.showWaring('Error with create tags: ' + status, 'Notification');\r\n        }\r\n        this.loading = false;\r\n      }\r\n    )\r\n  }\r\n  \r\n  //delete tags by id:\r\n  public deleteCategory(id: any) {\r\n    var confirmDel = confirm('Are you sure to delete it')\r\n\r\n    if (confirmDel) {\r\n      this.adminService.categoryDelete(id).subscribe(res => {\r\n        let category = res.data as Category;\r\n        var index =  this.tags.findIndex(x => x.id === category.id)\r\n\r\n        //remove by index:\r\n        this.categories.splice(index, 1);\r\n\r\n        this.rerender();\r\n        \r\n      }, err => {\r\n        let status = String(err);\r\n\r\n        if (status === \"Error: 401\") {\r\n          this.notificationService.showWaring('Session time out', 'Notification');\r\n\r\n          //set interval:\r\n          setTimeout(() => {\r\n            this.authService.sessionTimeOut();\r\n          }, 2500);\r\n        }\r\n        else {\r\n          this.notificationService.showWaring('Error with create tags: ' + status, 'Notification');\r\n        }\r\n      })\r\n    }\r\n  }\r\n  \r\n  //when update list\r\n  rerender(): void {\r\n    this.dtElement.dtInstance.then((dtInstance: DataTables.Api) => {\r\n      // Destroy the table first\r\n      dtInstance.destroy();\r\n      // Call the dtTrigger to rerender again\r\n      this.dtTrigger.next();\r\n    });\r\n  }\r\n\r\n  //got to edit, parameter is id of categories object\r\n  public gotoEdit(idCategory: any) {\r\n    this.router.navigate(['/admin/categories/edit', idCategory]);\r\n  }\r\n}\r\n\r\n\r\n","// Angular\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { CategoriesCreateComponent } from './categories.create.component';\r\nimport { CategoriesListComponent } from './categories.list.component';\r\nimport { CategoriesUpdateComponent } from './categories.update.component';\r\n\r\n// Components Routing\r\nimport { CategoriesRoutingModule } from './categories-routing.module';\r\n\r\nimport { NgxLoadingModule } from 'ngx-loading';\r\n\r\nimport { DataTablesModule } from 'angular-datatables';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    CategoriesRoutingModule,\r\n    NgxLoadingModule,\r\n    DataTablesModule\r\n  ],\r\n  declarations: [\r\n    CategoriesCreateComponent,\r\n    CategoriesListComponent,\r\n    CategoriesUpdateComponent\r\n  ]\r\n})\r\nexport class CategoriesModule { }\r\n","module.exports = \"<div class=\\\"animated fadeIn\\\">\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-sm-6\\\">\\r\\n      <div class=\\\"card\\\">\\r\\n        <div class=\\\"card-header\\\">\\r\\n          <strong>Category Update</strong>\\r\\n          <small>Form</small>\\r\\n        </div>\\r\\n        <div class=\\\"card-body\\\">\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-sm-12\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"name\\\">Category Name</label>\\r\\n                <input type=\\\"text\\\" [(ngModel)]=\\\"category.name\\\" #categories class=\\\"form-control\\\" id=\\\"name\\\"\\r\\n                  placeholder=\\\"Enter your tags name\\\">\\r\\n              </div>\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"color\\\">Color</label>\\r\\n                <input type=\\\"color\\\" [(ngModel)]=\\\"category.color\\\" class=\\\"form-control\\\" id=\\\"color\\\"\\r\\n                  placeholder=\\\"Enter your tags name\\\">\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"card-footer\\\">\\r\\n          <button type=\\\"submit\\\" [disabled]=\\\"!enable\\\" (click)=\\\"updateCategory()\\\" class=\\\"btn btn-sm btn-primary\\\"><i\\r\\n              class=\\\"fa fa-dot-circle-o\\\"></i> Update</button>\\r\\n          <button [routerLink]=\\\"['/admin/categories/list']\\\" class=\\\"btn btn-sm btn-secondary\\\"><i class=\\\"fa fa-list-alt\\\"></i>\\r\\n            View categories list</button>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <ngx-loading [show]=\\\"loading\\\" [config]=\\\"{ backdropBorderRadius: '3px' }\\\"></ngx-loading>\\r\\n</div>\"","import { Component, ElementRef, ViewChild } from '@angular/core';\r\nimport { AdminService } from '../../service/admin.service';\r\nimport { Login, Message, Tags, Category } from '../../model/index';\r\nimport { NotificationService } from '../../service/notification.service';\r\nimport { AuthenticationService } from '../../service/auth.service';\r\nimport { Router, ActivatedRoute } from \"@angular/router\";\r\nimport { from } from 'rxjs';\r\n\r\n@Component({\r\n  templateUrl: 'categories.update.component.html'\r\n})\r\nexport class CategoriesUpdateComponent {\r\n  @ViewChild('categories') categoriesElement: ElementRef;\r\n\r\n  tag: Tags;\r\n  category: Category;\r\n  enable: boolean = true;\r\n  loading: boolean = false;\r\n  id: any;\r\n\r\n  constructor(private adminService: AdminService, private router: Router, private notificationService: NotificationService, private authService: AuthenticationService, private activeRoute: ActivatedRoute) { }\r\n\r\n  ngOnInit() {\r\n    this.category = new Category();\r\n    this.id = Number(this.activeRoute.snapshot.paramMap.get('id'));\r\n\r\n    if (this.id) {\r\n      this.loading = true;\r\n\r\n      this.adminService.findCategoryById(this.id).subscribe(res => {\r\n        this.category = res.data as Category;\r\n        this.loading = false;\r\n      }, err => {\r\n        let status = String(err);\r\n\r\n        if (status === \"Error: 401\") {\r\n          this.notificationService.showWaring('Session time out', 'Notification');\r\n\r\n          //set interval:\r\n          setTimeout(() => {\r\n            this.authService.sessionTimeOut();\r\n          }, 2500);\r\n        }\r\n        else {\r\n          this.router.navigate(['/404']);\r\n        }\r\n\r\n        this.loading = false;\r\n      })\r\n    }\r\n  }\r\n\r\n  //update tags\r\n  public updateCategory() {\r\n      this.enable = false;\r\n\r\n      this.adminService.createOrUpdateCategories(this.category).subscribe(res => {\r\n        this.enable = true;\r\n        this.notificationService.showSuccess('Category was updated.', 'Notification');\r\n        this.tag = res.data;\r\n        this.categoriesElement.nativeElement.focus();\r\n      },\r\n        err => {\r\n          let status = String(err);\r\n\r\n          if (status === \"Error: 401\") {\r\n            this.notificationService.showWaring('Session time out', 'Notification');\r\n\r\n            //set interval:\r\n            setTimeout(() => {\r\n              this.authService.sessionTimeOut();\r\n            }, 2500);\r\n          }\r\n          else {\r\n            this.notificationService.showWaring('Error with create category: ' + status, 'Notification');\r\n          }\r\n\r\n          this.enable = true;\r\n        }\r\n      )\r\n  }\r\n}"],"sourceRoot":""}