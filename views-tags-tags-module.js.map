{"version":3,"sources":["webpack:///./src/app/views/tags/tags-routing.module.ts","webpack:///./src/app/views/tags/tags.create.component.html","webpack:///./src/app/views/tags/tags.create.component.ts","webpack:///./src/app/views/tags/tags.list.component.html","webpack:///./src/app/views/tags/tags.list.component.ts","webpack:///./src/app/views/tags/tags.module.ts","webpack:///./src/app/views/tags/tags.update.component.html","webpack:///./src/app/views/tags/tags.update.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAyC;AACc;AAEO;AACJ;AACI;AAE9D,IAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,IAAI,EAAE;YACJ,KAAK,EAAE,MAAM;SACd;QACD,QAAQ,EAAE;YACR;gBACE,IAAI,EAAE,EAAE;gBACR,UAAU,EAAE,QAAQ;aACrB;YACD;gBACE,IAAI,EAAE,QAAQ;gBACd,SAAS,EAAE,0EAAmB;gBAC9B,IAAI,EAAE;oBACJ,KAAK,EAAE,QAAQ;iBAChB;aACF;YACD;gBACE,IAAI,EAAE,MAAM;gBACZ,SAAS,EAAE,sEAAiB;gBAC5B,IAAI,EAAE;oBACJ,KAAK,EAAE,MAAM;iBACd;aACF;YACD;gBACE,IAAI,EAAE,UAAU;gBAChB,SAAS,EAAE,0EAAmB;gBAC9B,IAAI,EAAE;oBACJ,KAAK,EAAE,MAAM;iBACd;aACF;SACF;KACF;CACF,CAAC;AAMF;IAAA;IAAgC,CAAC;IAApB,iBAAiB;QAJ7B,8DAAQ,CAAC;YACR,OAAO,EAAE,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YACxC,OAAO,EAAE,CAAC,4DAAY,CAAC;SACxB,CAAC;OACW,iBAAiB,CAAG;IAAD,wBAAC;CAAA;AAAH;;;;;;;;;;;;AC/C9B,y+C;;;;;;;;;;;;;;;;;;;;;ACAiE;AACN;AACF;AACgB;AACN;AAOnE;IAME,6BAAoB,YAA0B,EAAU,mBAAwC,EAAU,WAAkC;QAAxH,iBAAY,GAAZ,YAAY,CAAc;QAAU,wBAAmB,GAAnB,mBAAmB,CAAqB;QAAU,gBAAW,GAAX,WAAW,CAAuB;QAF5I,WAAM,GAAY,IAAI,CAAC;IAEyH,CAAC;IAEjJ,sCAAQ,GAAR;QACE,IAAI,CAAC,GAAG,GAAG,IAAI,iDAAI,EAAE,CAAC;QACtB,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,SAAS,CAAC;IAC7B,CAAC;IAEM,wCAAU,GAAjB;QAAA,iBAiCC;QAhCC,IAAI,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,KAAK,CAAC;QAEhD,IAAI,IAAI,EAAE;YACR,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YAEpB,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,aAAG;gBAC1D,KAAI,CAAC,MAAM,GAAG,IAAI,CAAC;gBACnB,KAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC,mBAAmB,EAAE,cAAc,CAAC,CAAC;gBAC1E,KAAI,CAAC,WAAW,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;gBACvC,KAAI,CAAC,GAAG,CAAC,IAAI,GAAG,EAAE,CAAC;YACrB,CAAC,EACC,aAAG;gBACD,IAAI,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;gBAEzB,IAAI,MAAM,KAAK,YAAY,EAAE;oBAC3B,KAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,kBAAkB,EAAE,cAAc,CAAC,CAAC;oBAExE,eAAe;oBACf,UAAU,CAAC;wBACT,KAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC;oBACpC,CAAC,EAAE,IAAI,CAAC,CAAC;iBACV;qBACI;oBACH,KAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,0BAA0B,GAAG,MAAM,EAAE,cAAc,CAAC,CAAC;iBAC1F;gBAED,KAAI,CAAC,MAAM,GAAG,IAAI,CAAC;YACrB,CAAC,CACF;SACF;aAAM;YACL,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,4BAA4B,EAAE,cAAc,CAAC,CAAC;SACnF;IACH,CAAC;IA7CkB;QAAlB,+DAAS,CAAC,MAAM,CAAC;wEAAc,wDAAU;4DAAC;IADhC,mBAAmB;QAH/B,+DAAS,CAAC;YACT,oHAAyC;SAC1C,CAAC;+EAOkC,mEAAY,EAA+B,iFAAmB,EAAuB,2EAAqB;OANjI,mBAAmB,CA+C/B;IAAD,0BAAC;CAAA;AA/C+B;;;;;;;;;;;;ACXhC,8bAA8b,8BAA8B,iuBAAiuB,2DAA2D,SAAS,+CAA+C,YAAY,+HAA+H,qDAAqD,WAAW,uFAAuF,6CAA6C,+CAA+C,6CAA6C,+sC;;;;;;;;;;;;;;;;;;;;;;;;;ACApoD;AAC5B;AAEc;AACN;AAC1B;AAEV;AAC8C;AACb;AACR;AAExD;IAAA;IAKA,CAAC;IAAD,aAAC;AAAD,CAAC;AAKD;IAaE,2BAAoB,YAA0B,EAAU,MAAc,EAAU,mBAAwC,EAAU,WAAkC,EAAU,IAAgB;QAA1K,iBAAY,GAAZ,YAAY,CAAc;QAAU,WAAM,GAAN,MAAM,CAAQ;QAAU,wBAAmB,GAAnB,mBAAmB,CAAqB;QAAU,gBAAW,GAAX,WAAW,CAAuB;QAAU,SAAI,GAAJ,IAAI,CAAY;QAT9L,SAAI,GAAW,EAAE,CAAC;QAClB,YAAO,GAAG,KAAK,CAAC;QAChB,cAAS,GAAwB,EAAE,CAAC;QAEpC,YAAO,GAAW,qEAAW,CAAC,OAAO,CAAC;QACtC,8EAA8E;QAC9E,sDAAsD;QACtD,cAAS,GAAiB,IAAI,4CAAO,EAAE,CAAC;IAE0J,CAAC;IAEnM,oCAAQ,GAAR;QAAA,iBA+BC;QA7BC,IAAI,CAAC,SAAS,GAAG;YACf,UAAU,EAAE,cAAc;YAC1B,UAAU,EAAE,CAAC;SACd,CAAC;QACF,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QAEpB,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,CAAC,SAAS,CAAC,aAAG;YAC1C,KAAI,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;YACrB,sDAAsD;YACtD,KAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;YACtB,KAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACvB,CAAC,EACC,aAAG;YACD,IAAI,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;YAEzB,IAAI,MAAM,KAAK,YAAY,EAAE;gBAC3B,KAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,kBAAkB,EAAE,cAAc,CAAC,CAAC;gBAExE,eAAe;gBACf,UAAU,CAAC;oBACT,KAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC;gBACpC,CAAC,EAAE,IAAI,CAAC,CAAC;aACV;iBACI;gBACH,KAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,0BAA0B,GAAG,MAAM,EAAE,cAAc,CAAC,CAAC;aAC1F;YACD,KAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACvB,CAAC,CACF;IACH,CAAC;IAED,oBAAoB;IACb,sCAAU,GAAjB,UAAkB,EAAO;QAAzB,iBA6BC;QA5BC,IAAI,UAAU,GAAG,OAAO,CAAC,2BAA2B,CAAC;QAErD,IAAI,UAAU,EAAE;YACd,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,aAAG;gBAC5C,IAAI,GAAG,GAAG,GAAG,CAAC,IAAY,CAAC;gBAC3B,IAAI,KAAK,GAAI,KAAI,CAAC,IAAI,CAAC,SAAS,CAAC,WAAC,IAAI,QAAC,CAAC,EAAE,KAAK,GAAG,CAAC,EAAE,EAAf,CAAe,CAAC;gBAEtD,kBAAkB;gBAClB,KAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;gBAE3B,KAAI,CAAC,QAAQ,EAAE,CAAC;YAElB,CAAC,EAAE,aAAG;gBACJ,IAAI,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;gBAEzB,IAAI,MAAM,KAAK,YAAY,EAAE;oBAC3B,KAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,kBAAkB,EAAE,cAAc,CAAC,CAAC;oBAExE,eAAe;oBACf,UAAU,CAAC;wBACT,KAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC;oBACpC,CAAC,EAAE,IAAI,CAAC,CAAC;iBACV;qBACI;oBACH,KAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,0BAA0B,GAAG,MAAM,EAAE,cAAc,CAAC,CAAC;iBAC1F;YACH,CAAC,CAAC;SACH;IACH,CAAC;IAED,kBAAkB;IAClB,oCAAQ,GAAR;QAAA,iBAOC;QANC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,UAAC,UAA0B;YACxD,0BAA0B;YAC1B,UAAU,CAAC,OAAO,EAAE,CAAC;YACrB,uCAAuC;YACvC,KAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACL,CAAC;IAED,6CAA6C;IACtC,oCAAQ,GAAf,UAAgB,MAAW;QACzB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,kBAAkB,EAAE,MAAM,CAAC,CAAC,CAAC;IACrD,CAAC;IA3FD;QADC,+DAAS,CAAC,qEAAkB,CAAC;wEACnB,qEAAkB;wDAAC;IAFnB,iBAAiB;QAH7B,+DAAS,CAAC;YACT,gHAAuC;SACxC,CAAC;+EAckC,mEAAY,EAAkB,sDAAM,EAA+B,iFAAmB,EAAuB,2EAAqB,EAAgB,+DAAU;OAbnL,iBAAiB,CA8F7B;IAAD,wBAAC;CAAA;AA9F6B;;;;;;;;;;;;;;;;;;;;;;;;;;ACtB9B,UAAU;AACqC;AACF;AACJ;AAEqB;AACJ;AACI;AAE9D,qBAAqB;AACqC;AAEX;AAEO;AAiBtD;IAAA;IAA0B,CAAC;IAAd,UAAU;QAdtB,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,4DAAY;gBACZ,0DAAW;gBACX,sEAAiB;gBACjB,4DAAgB;gBAChB,mEAAgB;aACjB;YACD,YAAY,EAAE;gBACZ,0EAAmB;gBACnB,sEAAiB;gBACjB,0EAAmB;aACpB;SACF,CAAC;OACW,UAAU,CAAI;IAAD,iBAAC;CAAA;AAAJ;;;;;;;;;;;;AC/BvB,q7CAAq7C,8BAA8B,4B;;;;;;;;;;;;;;;;;;;;;;ACAl5C;AACN;AACF;AACgB;AACN;AACV;AAMzD;IAQE,6BAAoB,YAA0B,EAAU,MAAc,EAAU,mBAAwC,EAAU,WAAkC,EAAU,WAA2B;QAArL,iBAAY,GAAZ,YAAY,CAAc;QAAU,WAAM,GAAN,MAAM,CAAQ;QAAU,wBAAmB,GAAnB,mBAAmB,CAAqB;QAAU,gBAAW,GAAX,WAAW,CAAuB;QAAU,gBAAW,GAAX,WAAW,CAAgB;QAJzM,WAAM,GAAY,IAAI,CAAC;QACvB,YAAO,GAAY,KAAK,CAAC;IAGoL,CAAC;IAE9M,sCAAQ,GAAR;QAAA,iBA4BC;QA3BC,IAAI,CAAC,GAAG,GAAG,IAAI,iDAAI,EAAE,CAAC;QACtB,IAAI,CAAC,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;QAE/D,IAAI,IAAI,CAAC,EAAE,EAAE;YACX,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YAEpB,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,aAAG;gBAClD,KAAI,CAAC,GAAG,GAAG,GAAG,CAAC,IAAY,CAAC;gBAC5B,KAAI,CAAC,OAAO,GAAG,KAAK,CAAC;YACvB,CAAC,EAAE,aAAG;gBACJ,IAAI,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;gBAEzB,IAAI,MAAM,KAAK,YAAY,EAAE;oBAC3B,KAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,kBAAkB,EAAE,cAAc,CAAC,CAAC;oBAExE,eAAe;oBACf,UAAU,CAAC;wBACT,KAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC;oBACpC,CAAC,EAAE,IAAI,CAAC,CAAC;iBACV;qBACI;oBACH,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;iBAChC;gBAED,KAAI,CAAC,OAAO,GAAG,KAAK,CAAC;YACvB,CAAC,CAAC;SACH;IACH,CAAC;IAED,aAAa;IACN,wCAAU,GAAjB;QAAA,iBA2BC;QA1BG,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QAEpB,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,aAAG;YAC1D,KAAI,CAAC,MAAM,GAAG,IAAI,CAAC;YACnB,KAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC,mBAAmB,EAAE,cAAc,CAAC,CAAC;YAC1E,KAAI,CAAC,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC;YACpB,KAAI,CAAC,WAAW,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;QACzC,CAAC,EACC,aAAG;YACD,IAAI,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;YAEzB,IAAI,MAAM,KAAK,YAAY,EAAE;gBAC3B,KAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,kBAAkB,EAAE,cAAc,CAAC,CAAC;gBAExE,eAAe;gBACf,UAAU,CAAC;oBACT,KAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC;gBACpC,CAAC,EAAE,IAAI,CAAC,CAAC;aACV;iBACI;gBACH,KAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,0BAA0B,GAAG,MAAM,EAAE,cAAc,CAAC,CAAC;aAC1F;YAED,KAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACrB,CAAC,CACF;IACL,CAAC;IAnEkB;QAAlB,+DAAS,CAAC,MAAM,CAAC;wEAAc,wDAAU;4DAAC;IADhC,mBAAmB;QAH/B,+DAAS,CAAC;YACT,oHAAyC;SAC1C,CAAC;+EASkC,mEAAY,EAAkB,sDAAM,EAA+B,iFAAmB,EAAuB,2EAAqB,EAAuB,8DAAc;OAR9L,mBAAmB,CAqE/B;IAAD,0BAAC;CAAA;AArE+B","file":"views-tags-tags-module.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { TagsCreateComponent } from './tags.create.component';\r\nimport { TagsListComponent } from './tags.list.component';\r\nimport { TagsUpdateComponent } from './tags.update.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    data: {\r\n      title: 'Tags'\r\n    },\r\n    children: [\r\n      {\r\n        path: '',\r\n        redirectTo: 'create'\r\n      },\r\n      {\r\n        path: 'create',\r\n        component: TagsCreateComponent,\r\n        data: {\r\n          title: 'Create'\r\n        }\r\n      },\r\n      {\r\n        path: 'list',\r\n        component: TagsListComponent,\r\n        data: {\r\n          title: 'List'\r\n        }\r\n      },\r\n      {\r\n        path: 'edit/:id',\r\n        component: TagsUpdateComponent,\r\n        data: {\r\n          title: 'Edit'\r\n        }\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class TagsRoutingModule {}","module.exports = \"<div class=\\\"animated fadeIn\\\">\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-sm-6\\\">\\r\\n      <div class=\\\"card\\\">\\r\\n        <div class=\\\"card-header\\\">\\r\\n          <strong>Tags Create</strong>\\r\\n          <small>Form</small>\\r\\n        </div>\\r\\n        <div class=\\\"card-body\\\">\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-sm-12\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"name\\\">Tags Name</label>\\r\\n                <input type=\\\"text\\\" [(ngModel)]=\\\"tag.name\\\" #tags class=\\\"form-control\\\" id=\\\"name\\\"\\r\\n                  placeholder=\\\"Enter your tags name\\\">\\r\\n              </div>\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"color\\\">Color</label>\\r\\n                <input type=\\\"color\\\" [(ngModel)]=\\\"tag.color\\\" class=\\\"form-control\\\" id=\\\"color\\\"\\r\\n                  placeholder=\\\"Enter your tags name\\\">\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"card-footer\\\">\\r\\n          <button type=\\\"submit\\\" [disabled]=\\\"!enable\\\" (click)=\\\"createTags()\\\"\\r\\n            class=\\\"btn btn-sm btn-primary active btn-square\\\"><i class=\\\"fa fa-dot-circle-o\\\"></i> Submit</button>\\r\\n          <button [routerLink]=\\\"['/admin/tags/list']\\\" class=\\\"btn btn-sm btn-secondary active btn-square\\\"><i\\r\\n              class=\\\"fa fa-list-alt\\\"></i> View tags list</button>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\"","import { Component, ElementRef, ViewChild } from '@angular/core';\r\nimport { AdminService } from '../../service/admin.service';\r\nimport { Login, Message, Tags } from '../../model/index';\r\nimport { NotificationService } from '../../service/notification.service';\r\nimport { AuthenticationService } from '../../service/auth.service';\r\nimport { Router } from \"@angular/router\";\r\nimport { from } from 'rxjs';\r\n\r\n@Component({\r\n  templateUrl: 'tags.create.component.html'\r\n})\r\nexport class TagsCreateComponent {\r\n  @ViewChild('tags') tagsElement: ElementRef;\r\n\r\n  tag: Tags;\r\n  enable: boolean = true;\r\n\r\n  constructor(private adminService: AdminService, private notificationService: NotificationService, private authService: AuthenticationService) { }\r\n\r\n  ngOnInit() {\r\n    this.tag = new Tags();\r\n    this.tag.color = '#51b54a';\r\n  }\r\n\r\n  public createTags() {\r\n    let name = this.tagsElement.nativeElement.value;\r\n\r\n    if (name) {\r\n      this.enable = false;\r\n\r\n      this.adminService.createOrUpdateTags(this.tag).subscribe(res => {\r\n        this.enable = true;\r\n        this.notificationService.showSuccess('Tags was created.', 'Notification');\r\n        this.tagsElement.nativeElement.focus();\r\n        this.tag.name = '';\r\n      },\r\n        err => {\r\n          let status = String(err);\r\n\r\n          if (status === \"Error: 401\") {\r\n            this.notificationService.showWaring('Session time out', 'Notification');\r\n\r\n            //set interval:\r\n            setTimeout(() => {\r\n              this.authService.sessionTimeOut();\r\n            }, 2500);\r\n          }\r\n          else {\r\n            this.notificationService.showWaring('Error with create tags: ' + status, 'Notification');\r\n          }\r\n\r\n          this.enable = true;\r\n        }\r\n      )\r\n    } else {\r\n      this.notificationService.showWaring('Tags field must nor empty.', 'Notification');\r\n    }\r\n  }\r\n}\r\n\r\n\r\n","module.exports = \"<div class=\\\"animated fadeIn\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <!--/.col-->\\r\\n        <div class=\\\"col-lg-12 col-sm-8\\\">\\r\\n            <div class=\\\"card\\\">\\r\\n                <div class=\\\"card-header\\\">\\r\\n                    <i class=\\\"fa fa-align-justify\\\"></i> <b>TAGS LIST</b>\\r\\n                </div>\\r\\n                <div class=\\\"card-body\\\">\\r\\n                    <ngx-loading [show]=\\\"loading\\\" [config]=\\\"{ backdropBorderRadius: '3px' }\\\"></ngx-loading>\\r\\n                    \\r\\n                    <table datatable [dtOptions]=\\\"dtOptions\\\" [dtTrigger]=\\\"dtTrigger\\\" class=\\\"row-border hover\\\">\\r\\n                        <thead>\\r\\n                            <tr>\\r\\n                                <th>STT</th>\\r\\n                                <th>Name</th>\\r\\n                                <th>Color</th>\\r\\n                                <th>Create at</th>\\r\\n                                <th>Updated at</th>\\r\\n                                <th>Actions</th>\\r\\n                            </tr>\\r\\n                        </thead>\\r\\n                        <tbody *ngIf=\\\"tags?.length != 0\\\">\\r\\n                            <tr *ngFor=\\\"let tag of tags; let i = index\\\">\\r\\n                                <td>{{ i + 1 }}</td>\\r\\n                                <td>{{ tag.name }}</td>\\r\\n                                <td>\\r\\n                                    <input type=\\\"color\\\" style=\\\"width: 70px;\\\" [readonly]=\\\"true\\\" [disabled]=\\\"true\\\" value=\\\"{{tag.color}}\\\"/>\\r\\n                                </td>\\r\\n                                <td>{{ tag.created | date: 'dd/MM/yyyy HH:mm:ss' }}</td>\\r\\n                                <td>{{ tag.updated | date: 'dd/MM/yyyy HH:mm:ss' }}</td>\\r\\n                                <td>\\r\\n                                    <button (click)=\\\"gotoEdit(tag.id)\\\" class=\\\"btn btn-sm btn-primary btn-square\\\"><i class=\\\"fa fa-pencil-square-o\\\" aria-hidden=\\\"true\\\"></i> Edit</button>\\r\\n                                    <button (click)=\\\"deleteTags(tag.id)\\\" class=\\\"btn btn-sm btn-secondary btn-square\\\"><i class=\\\"fa fa-trash-o\\\" aria-hidden=\\\"true\\\"></i> Delete</button>\\r\\n                                </td>\\r\\n                            </tr>\\r\\n                        </tbody>\\r\\n                        <tbody *ngIf=\\\"tags?.length == 0\\\">\\r\\n                            <tr>\\r\\n                                <td colspan=\\\"3\\\" class=\\\"no-data-available\\\">No data!</td>\\r\\n                            </tr>\\r\\n                        <tbody>\\r\\n                    </table>\\r\\n                </div>\\r\\n            </div>\\r\\n            <button type=\\\"button\\\" [routerLink]=\\\"['/admin/tags/create']\\\" class=\\\"btn pull-right btn-success btn-square active\\\" aria-pressed=\\\"true\\\"><i class=\\\"fa fa-paper-plane-o\\\" aria-hidden=\\\"true\\\"></i> Create tags</button>\\r\\n            <br><br><br>\\r\\n        </div>\\r\\n        <!--/.col-->\\r\\n    </div>\\r\\n   \\r\\n</div>\"","import { AfterViewInit, Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { AdminService } from '../../service/admin.service';\r\nimport { Login, Message, Tags } from '../../model/index';\r\nimport { NotificationService } from '../../service/notification.service';\r\nimport { AuthenticationService } from '../../service/auth.service';\r\nimport { Router } from \"@angular/router\";\r\nimport { from } from 'rxjs';\r\nimport { Subject } from 'rxjs';\r\nimport { HttpClient, HttpResponse, HttpHeaders } from '@angular/common/http';\r\nimport { environment } from \"../../../environments/environment\";\r\nimport { DataTableDirective } from 'angular-datatables';\r\n\r\nclass Person {\r\n  id: number;\r\n  firstName: string;\r\n  lastName: string;\r\n  actions: String;\r\n}\r\n\r\n@Component({\r\n  templateUrl: 'tags.list.component.html'\r\n})\r\nexport class TagsListComponent {\r\n  @ViewChild(DataTableDirective)\r\n  dtElement: DataTableDirective;\r\n  \r\n  tags: Tags[] = [];\r\n  loading = false;\r\n  dtOptions: DataTables.Settings = {};\r\n  persons: Person[];\r\n  API_URL: String = environment.API_URL;\r\n  // We use this trigger because fetching the list of persons can be quite long,\r\n  // thus we ensure the data is fetched before rendering\r\n  dtTrigger: Subject<any> = new Subject();\r\n\r\n  constructor(private adminService: AdminService, private router: Router, private notificationService: NotificationService, private authService: AuthenticationService, private http: HttpClient) { }\r\n\r\n  ngOnInit(): void {\r\n\r\n    this.dtOptions = {\r\n      pagingType: 'full_numbers',\r\n      pageLength: 6\r\n    };\r\n    this.loading = true;\r\n\r\n    this.adminService.getAllTags().subscribe(res => {\r\n      this.tags = res.data;\r\n      // Calling the DT trigger to manually render the table\r\n      this.dtTrigger.next();\r\n      this.loading = false;\r\n    },\r\n      err => {\r\n        let status = String(err);\r\n\r\n        if (status === \"Error: 401\") {\r\n          this.notificationService.showWaring('Session time out', 'Notification');\r\n\r\n          //set interval:\r\n          setTimeout(() => {\r\n            this.authService.sessionTimeOut();\r\n          }, 2500);\r\n        }\r\n        else {\r\n          this.notificationService.showWaring('Error with create tags: ' + status, 'Notification');\r\n        }\r\n        this.loading = false;\r\n      }\r\n    )\r\n  }\r\n  \r\n  //delete tags by id:\r\n  public deleteTags(id: any) {\r\n    var confirmDel = confirm('Are you sure to delete it')\r\n\r\n    if (confirmDel) {\r\n      this.adminService.tagsDelete(id).subscribe(res => {\r\n        let tag = res.data as Tags;\r\n        var index =  this.tags.findIndex(x => x.id === tag.id)\r\n\r\n        //remove by index:\r\n        this.tags.splice(index, 1);\r\n\r\n        this.rerender();\r\n        \r\n      }, err => {\r\n        let status = String(err);\r\n\r\n        if (status === \"Error: 401\") {\r\n          this.notificationService.showWaring('Session time out', 'Notification');\r\n\r\n          //set interval:\r\n          setTimeout(() => {\r\n            this.authService.sessionTimeOut();\r\n          }, 2500);\r\n        }\r\n        else {\r\n          this.notificationService.showWaring('Error with create tags: ' + status, 'Notification');\r\n        }\r\n      })\r\n    }\r\n  }\r\n  \r\n  //when update list\r\n  rerender(): void {\r\n    this.dtElement.dtInstance.then((dtInstance: DataTables.Api) => {\r\n      // Destroy the table first\r\n      dtInstance.destroy();\r\n      // Call the dtTrigger to rerender again\r\n      this.dtTrigger.next();\r\n    });\r\n  }\r\n\r\n  //got to edit, parameter is id of tags object\r\n  public gotoEdit(idTags: any) {\r\n    this.router.navigate(['/admin/tags/edit', idTags]);\r\n  }\r\n}\r\n\r\n\r\n","// Angular\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { TagsCreateComponent } from './tags.create.component';\r\nimport { TagsListComponent } from './tags.list.component';\r\nimport { TagsUpdateComponent } from './tags.update.component';\r\n\r\n// Components Routing\r\nimport { TagsRoutingModule } from './tags-routing.module';\r\n\r\nimport { NgxLoadingModule } from 'ngx-loading';\r\n\r\nimport { DataTablesModule } from 'angular-datatables';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    TagsRoutingModule,\r\n    NgxLoadingModule,\r\n    DataTablesModule\r\n  ],\r\n  declarations: [\r\n    TagsCreateComponent,\r\n    TagsListComponent,\r\n    TagsUpdateComponent\r\n  ]\r\n})\r\nexport class TagsModule { }\r\n","module.exports = \"<div class=\\\"animated fadeIn\\\">\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-sm-6\\\">\\r\\n      <div class=\\\"card\\\">\\r\\n        <div class=\\\"card-header\\\">\\r\\n          <strong>Tags Update</strong>\\r\\n          <small>Form</small>\\r\\n        </div>\\r\\n        <div class=\\\"card-body\\\">\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-sm-12\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"name\\\">Tags Name</label>\\r\\n                <input type=\\\"text\\\" [(ngModel)]=\\\"tag.name\\\" #tags class=\\\"form-control\\\" id=\\\"name\\\"\\r\\n                  placeholder=\\\"Enter your tags name\\\">\\r\\n              </div>\\r\\n              <div class=\\\"form-group\\\">\\r\\n                  <label for=\\\"name\\\">Color</label>\\r\\n                  <input type=\\\"color\\\" [(ngModel)]=\\\"tag.color\\\" class=\\\"form-control\\\" id=\\\"color\\\">\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"card-footer\\\">\\r\\n          <button type=\\\"submit\\\" [disabled]=\\\"!enable\\\" (click)=\\\"updateTags()\\\" class=\\\"btn btn-sm btn-primary\\\"><i\\r\\n              class=\\\"fa fa-dot-circle-o\\\"></i> Update</button>\\r\\n          <button [routerLink]=\\\"['/admin/tags/list']\\\" class=\\\"btn btn-sm btn-secondary\\\"><i class=\\\"fa fa-list-alt\\\"></i>\\r\\n            View tags list</button>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <ngx-loading [show]=\\\"loading\\\" [config]=\\\"{ backdropBorderRadius: '3px' }\\\"></ngx-loading>\\r\\n</div>\"","import { Component, ElementRef, ViewChild } from '@angular/core';\r\nimport { AdminService } from '../../service/admin.service';\r\nimport { Login, Message, Tags } from '../../model/index';\r\nimport { NotificationService } from '../../service/notification.service';\r\nimport { AuthenticationService } from '../../service/auth.service';\r\nimport { Router, ActivatedRoute } from \"@angular/router\";\r\nimport { from } from 'rxjs';\r\n\r\n@Component({\r\n  templateUrl: 'tags.update.component.html'\r\n})\r\nexport class TagsUpdateComponent {\r\n  @ViewChild('tags') tagsElement: ElementRef;\r\n\r\n  tag: Tags;\r\n  enable: boolean = true;\r\n  loading: boolean = false;\r\n  id: any;\r\n\r\n  constructor(private adminService: AdminService, private router: Router, private notificationService: NotificationService, private authService: AuthenticationService, private activeRoute: ActivatedRoute) { }\r\n\r\n  ngOnInit() {\r\n    this.tag = new Tags();\r\n    this.id = Number(this.activeRoute.snapshot.paramMap.get('id'));\r\n\r\n    if (this.id) {\r\n      this.loading = true;\r\n\r\n      this.adminService.findTagById(this.id).subscribe(res => {\r\n        this.tag = res.data as Tags;\r\n        this.loading = false;\r\n      }, err => {\r\n        let status = String(err);\r\n\r\n        if (status === \"Error: 401\") {\r\n          this.notificationService.showWaring('Session time out', 'Notification');\r\n\r\n          //set interval:\r\n          setTimeout(() => {\r\n            this.authService.sessionTimeOut();\r\n          }, 2500);\r\n        }\r\n        else {\r\n          this.router.navigate(['/404']);\r\n        }\r\n\r\n        this.loading = false;\r\n      })\r\n    }\r\n  }\r\n\r\n  //update tags\r\n  public updateTags() {\r\n      this.enable = false;\r\n\r\n      this.adminService.createOrUpdateTags(this.tag).subscribe(res => {\r\n        this.enable = true;\r\n        this.notificationService.showSuccess('Tags was updated.', 'Notification');\r\n        this.tag = res.data;\r\n        this.tagsElement.nativeElement.focus();\r\n      },\r\n        err => {\r\n          let status = String(err);\r\n\r\n          if (status === \"Error: 401\") {\r\n            this.notificationService.showWaring('Session time out', 'Notification');\r\n\r\n            //set interval:\r\n            setTimeout(() => {\r\n              this.authService.sessionTimeOut();\r\n            }, 2500);\r\n          }\r\n          else {\r\n            this.notificationService.showWaring('Error with create tags: ' + status, 'Notification');\r\n          }\r\n\r\n          this.enable = true;\r\n        }\r\n      )\r\n  }\r\n}"],"sourceRoot":""}